spring.application.name=api-gateway
server.port=8000
eureka.client.serviceUrl.defaultZone=http://localhost:9000/eureka/

zuul.prefix=/api

zuul.routes.order-producer.path=/order-producer/**
zuul.routes.order-producer.serviceId=order-producer-service

zuul.routes.order-consumer.path=/order-consumer/**
zuul.routes.order-consumer.serviceId=order-consumer-service

zuul.routes.user.path=/user/**
zuul.routes.user.serviceId=user-service

zuul.routes.sale.path=/sale/**
zuul.routes.sale.serviceId=sale-service

zuul.routes.population.path=/population/**
zuul.routes.population.serviceId=population-service

zuul.routes.login.path=/login/**
zuul.routes.login.serviceId=login-service

ribbon.eureka.enabled=true
eureka.client.register-with-eureka=false
ribbon.ReadTimeout=60000

#spring.mail.host=smtp.gmail.com
#spring.mail.port=587
#spring.mail.username=a
#spring.mail.password=a

# Other properties
#spring.mail.properties.mail.smtp.auth=true
#spring.mail.properties.mail.smtp.connectiontimeout=5000
#spring.mail.properties.mail.smtp.timeout=5000
#spring.mail.properties.mail.smtp.writetimeout=5000

# TLS , port 587
#spring.mail.properties.mail.smtp.starttls.enable=true

# Enable multipart uploads
#spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
#spring.servlet.multipart.file-size-threshold=2KB
# Max file size.
#spring.servlet.multipart.max-file-size=200MB
# Max Request Size
#spring.servlet.multipart.max-request-size=215MB

spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
#spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.cache=true

#spring.datasource.url=jdbc:postgresql://93.89.235.173:5432/business-management?ersin
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres?microservice

#spring.datasource.username= dbuser
#spring.datasource.password=N6u2(8xkkm
spring.datasource.username= postgres
spring.datasource.password=postgres
spring.datasource.connectionProperties=useUnicode=true;characterEncoding=utf-8;
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

spring.jpa.properties.hibernate.default_schema=microservice

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update
# Show or not log for each sql query
spring.jpa.show-sql = true
spring.main.allow-bean-definition-overriding=true

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true